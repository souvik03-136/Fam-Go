// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: youtube_queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createVideo = `-- name: CreateVideo :exec

INSERT INTO videos (title, description, published_at, thumbnail_url, video_url)
VALUES (?, ?, ?, ?, ?)
`

type CreateVideoParams struct {
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	PublishedAt  time.Time      `json:"published_at"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	VideoUrl     string         `json:"video_url"`
}

// youtube_queries.sql
func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) error {
	_, err := q.db.ExecContext(ctx, createVideo,
		arg.Title,
		arg.Description,
		arg.PublishedAt,
		arg.ThumbnailUrl,
		arg.VideoUrl,
	)
	return err
}

const deleteVideo = `-- name: DeleteVideo :exec
DELETE FROM videos
WHERE id = ?
`

func (q *Queries) DeleteVideo(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, id)
	return err
}

const getLastInsertedVideo = `-- name: GetLastInsertedVideo :one
SELECT id, title, description, published_at, thumbnail_url, video_url 
FROM videos 
WHERE id = (SELECT LAST_INSERT_ID())
`

type GetLastInsertedVideoRow struct {
	ID           uint64         `json:"id"`
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	PublishedAt  time.Time      `json:"published_at"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	VideoUrl     string         `json:"video_url"`
}

func (q *Queries) GetLastInsertedVideo(ctx context.Context) (GetLastInsertedVideoRow, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertedVideo)
	var i GetLastInsertedVideoRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.PublishedAt,
		&i.ThumbnailUrl,
		&i.VideoUrl,
	)
	return i, err
}

const getVideoByID = `-- name: GetVideoByID :one
SELECT id, title, description, published_at, thumbnail_url, video_url
FROM videos
WHERE id = ?
`

type GetVideoByIDRow struct {
	ID           uint64         `json:"id"`
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	PublishedAt  time.Time      `json:"published_at"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	VideoUrl     string         `json:"video_url"`
}

func (q *Queries) GetVideoByID(ctx context.Context, id uint64) (GetVideoByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getVideoByID, id)
	var i GetVideoByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.PublishedAt,
		&i.ThumbnailUrl,
		&i.VideoUrl,
	)
	return i, err
}

const listVideos = `-- name: ListVideos :many
SELECT id, title, description, published_at, thumbnail_url, video_url
FROM videos
ORDER BY published_at DESC
LIMIT ? OFFSET ?
`

type ListVideosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListVideosRow struct {
	ID           uint64         `json:"id"`
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	PublishedAt  time.Time      `json:"published_at"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	VideoUrl     string         `json:"video_url"`
}

func (q *Queries) ListVideos(ctx context.Context, arg ListVideosParams) ([]ListVideosRow, error) {
	rows, err := q.db.QueryContext(ctx, listVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListVideosRow
	for rows.Next() {
		var i ListVideosRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.ThumbnailUrl,
			&i.VideoUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVideo = `-- name: UpdateVideo :exec
UPDATE videos
SET title = ?, description = ?, published_at = ?, thumbnail_url = ?, video_url = ?
WHERE id = ?
`

type UpdateVideoParams struct {
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	PublishedAt  time.Time      `json:"published_at"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	VideoUrl     string         `json:"video_url"`
	ID           uint64         `json:"id"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) error {
	_, err := q.db.ExecContext(ctx, updateVideo,
		arg.Title,
		arg.Description,
		arg.PublishedAt,
		arg.ThumbnailUrl,
		arg.VideoUrl,
		arg.ID,
	)
	return err
}
